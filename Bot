import os
import random
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
user_sessions = {}

class TournamentState(StatesGroup):
    uploading = State()
    voting = State()

def generate_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚¨ÖÔ∏è –õ—ñ–≤–∞", callback_data="left"),
        InlineKeyboardButton("‚û°Ô∏è –ü—Ä–∞–≤–∞", callback_data="right")
    )

def undo_keyboard():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("‚Ü©Ô∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="undo"))

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_sessions[message.chat.id] = {"photos": [], "history": [], "winners": []}
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–æ—Ç–æ –¥–ª—è —Ç—É—Ä–Ω—ñ—Ä—É. –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –Ω–∞–ø–∏—à—ñ—Ç—å /done.")

@dp.message_handler(commands=["done"], state="*")
async def start_tournament(message: types.Message, state: FSMContext):
    session = user_sessions.get(message.chat.id, {})
    photos = session.get("photos", [])

    if len(photos) < 2:
        await message.answer("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 —Ñ–æ—Ç–æ –¥–ª—è —Ç—É—Ä–Ω—ñ—Ä—É!")
        return

    random.shuffle(photos)
    session["winners"] = []
    session["history"] = []
    session["round"] = 1
    session["match_index"] = 0
    await state.set_state(TournamentState.voting)
    await send_next_match(message.chat.id)

@dp.message_handler(content_types=types.ContentType.PHOTO, state="*")
async def photo_handler(message: types.Message):
    user_id = message.chat.id
    file_id = message.photo[-1].file_id  
    session = user_sessions.setdefault(user_id, {"photos": [], "history": [], "winners": []})
    session["photos"].append(file_id)
    await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! –ó–∞–≥–∞–ª–æ–º: {len(session['photos'])}")

async def send_next_match(chat_id):
    session = user_sessions.get(chat_id, {})
    match_index = session["match_index"]
    photos = session["photos"]

    if match_index * 2 >= len(photos):  
        if len(photos) % 2 == 1:
            session["winners"].append(photos[-1])
        if len(session["winners"]) == 1:
            await send_winner(chat_id)
            return
        session["photos"] = session["winners"]
        session["winners"] = []
        session["match_index"] = 0
        session["round"] += 1
        await send_next_match(chat_id)
        return

    left_photo, right_photo = photos[match_index * 2: match_index * 2 + 2]
    session["current_pair"] = (left_photo, right_photo)

    await bot.send_photo(chat_id, left_photo, caption=f"‚öîÔ∏è –†–∞—É–Ω–¥ {session['round']}, –º–∞—Ç—á {match_index + 1}",
                         reply_markup=generate_keyboard())
    await bot.send_photo(chat_id, right_photo, caption="–û–±–∏—Ä–∞–π—Ç–µ –∫—Ä–∞—â–µ —Ñ–æ—Ç–æ ‚¨ÜÔ∏è", reply_markup=undo_keyboard())

@dp.callback_query_handler(lambda c: c.data in ["left", "right", "undo"], state=TournamentState.voting)
async def process_vote(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.message.chat.id
    session = user_sessions.get(user_id, {})

    if callback_query.data == "undo":
        if session["history"]:
            session["photos"] = session["history"].pop()
            session["match_index"] -= 1
            await callback_query.answer("‚Ü©Ô∏è –í–∏–±—ñ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            await send_next_match(user_id)
        else:
            await callback_query.answer("‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
        return

    winner_photo = session["current_pair"][0] if callback_query.data == "left" else session["current_pair"][1]
    session["winners"].append(winner_photo)
    session["history"].append(session["photos"].copy())  
    session["match_index"] += 1

    await callback_query.answer("‚úÖ –í–∏–±—ñ—Ä –ø—Ä–∏–π–Ω—è—Ç–æ")
    await send_next_match(user_id)

async def send_winner(chat_id):
    session = user_sessions.get(chat_id, {})
    winner_photo = session["photos"][0]
    await bot.send_photo(chat_id, winner_photo, caption="üèÜ –ù–∞–π–∫—Ä–∞—â–µ —Ñ–æ—Ç–æ —Ç—É—Ä–Ω—ñ—Ä—É!")
    save_results(chat_id, session)
    del user_sessions[chat_id]  

def save_results(chat_id, session):
    filename = f"tournament_{chat_id}.json"
    data = {
        "winner": session["photos"][0],
        "rounds": session["round"],
        "history": session["history"]
    }
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

@dp.message_handler(commands=["restart"])
async def restart_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_sessions.pop(message.chat.id, None)
    await message.answer("üîÑ –¢—É—Ä–Ω—ñ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—ñ —Ñ–æ—Ç–æ!")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
